// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  columns        Column[]
  tasks          Task[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Label          Label[]
  isDeleted      Boolean      @default(false)
}

model Column {
  id        String  @id @default(cuid())
  name      String
  order     Int
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  isDeleted Boolean @default(false)
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      String         @default("pending")
  order       Int
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId    String
  column      Column         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignees   TaskAssignee[]
  comments    Comment[]
  attachments Attachment[]
  labels      TaskLabel[]
  dueDate     DateTime?
  priority    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDeleted   Boolean        @default(false)
}

model TaskAssignee {
  id        String  @id @default(cuid())
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted Boolean @default(false)

  @@unique([taskId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
}

model Attachment {
  id           String   @id @default(cuid())
  url          String
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  createdAt    DateTime @default(now())
  isDeleted    Boolean  @default(false)
}

model Label {
  id             String        @id @default(cuid())
  name           String
  color          String
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks          TaskLabel[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  isDeleted      Boolean       @default(false)
}

model TaskLabel {
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  labelId   String
  label     Label   @relation(fields: [labelId], references: [id], onDelete: Cascade)
  isDeleted Boolean @default(false)

  @@id([taskId, labelId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean        @default(false)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  notifications Notification[]
  tasksAssigned TaskAssignee[]
  comments      Comment[]
  attachments   Attachment[]
  feedback      Feedback[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  projects    Project[]
  labels      Label[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Feedback {
  id        String           @id @default(cuid())
  userId    String?
  user      User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  answers   FeedbackAnswer[]
  createdAt DateTime         @default(now())
  isDeleted Boolean          @default(false)
}

model FeedbackAnswer {
  id         String   @id @default(cuid())
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  question   String
  answer     String
  isDeleted  Boolean  @default(false)
}
